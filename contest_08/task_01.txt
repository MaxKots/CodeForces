#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int N;
    cin >> N;

    vector<pair<int, int>> segments(N);
    for (int i = 0; i < N; ++i) {
        cin >> segments[i].first >> segments[i].second;
    }

    // сорт. отрезки по левой границе
    sort(segments.begin(), segments.end());

    vector<pair<int, int>> merged;
    int currentL = segments[0].first;
    int currentR = segments[0].second;

    for (int i = 1; i < N; ++i) {
        if (segments[i].first <= currentR) {
            // если этот отрезок пересекается с предыдущим - объединить
            currentR = max(currentR, segments[i].second);
        } else {
            // Если не, то добавить текущий отрезок в рез-тат и начать заново
            merged.push_back({currentL, currentR});
            currentL = segments[i].first;
            currentR = segments[i].second;
        }
    }

    // оследний отрезок
    merged.push_back({currentL, currentR});

    // вывод
    cout << merged.size() << endl;
    for (const auto& segment : merged) {
        cout << segment.first << " " << segment.second << endl;
    }

    return 0;
}