#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

int main() {
    int n, k;
    cin >> n >> k;

    vector<int> a(n);
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    // Шарашим динамическое программирование
    vector<vector<long long>> dp(n + 1, vector<long long>(k + 1, LLONG_MIN));
    dp[0][0] = 0;

    for (int i = 1; i <= n; ++i) {
        for (int j = 1; j <= k; ++j) {
            // Если a[i-1] продолжает текущий подотрезок
            if (dp[i-1][j] != LLONG_MIN) {
                dp[i][j] = max(dp[i][j], dp[i-1][j] + a[i-1] * j);
            }
            // Если a[i-1] начинает новый подотрезок
            if (dp[i-1][j-1] != LLONG_MIN) {
                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + a[i-1] * j);
            }
        }
    }
    // Вывод
    cout << dp[n][k] << endl;

    return 0;
}
